upstairs_heater_power:
  alias: Upstairs Heater Power
  sequence:
  - service: remote.send_command
    data:
      device: Upstairs Heater
      command: power
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:power
upstairs_heater_timer:
  alias: Upstairs Heater Timer
  sequence:
  - service: remote.send_command
    data:
      device: Upstairs Heater
      command: timer
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:timer-outline
upstairs_heater_up:
  alias: Upstairs Heater Up
  sequence:
  - service: remote.send_command
    data:
      device: Upstairs Heater
      command: up
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:arrow-up-bold-circle
upstairs_heater_down:
  alias: Upstairs Heater Down
  sequence:
  - service: remote.send_command
    data:
      device: Upstairs Heater
      command: down
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:arrow-down-bold-circle
master_tv_power:
  alias: Master TV Power
  sequence:
  - service: remote.send_command
    data:
      device: Master TV
      command: power
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:power
master_tv_volume_up:
  alias: Master TV Volume Up
  sequence:
  - service: remote.send_command
    data:
      device: Master TV
      command: volume up
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:plus-thick
master_tv_volume_down:
  alias: Master TV Volume Down
  sequence:
  - service: remote.send_command
    data:
      device: Master TV
      command: volume down
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:minus-thick
master_tv_channel_up:
  alias: Master TV Channel Up
  sequence:
  - service: remote.send_command
    data:
      device: Master TV
      command: channel up
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:chevron-up
master_tv_channel_down:
  alias: Master TV Channel Down
  sequence:
  - service: remote.send_command
    data:
      device: Master TV
      command: channel down
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:chevron-down
master_tv_input:
  alias: Master TV Input
  sequence:
  - service: remote.send_command
    data:
      device: Master TV
      command: input
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:import
master_tv_select:
  alias: Master TV Select
  sequence:
  - service: remote.send_command
    data:
      device: Master TV
      command: select
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:alpha-a
master_tv_timer:
  alias: Master TV Timer
  sequence:
  - service: remote.send_command
    data:
      device: Master TV
      command: timer
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:alpha-b
master_tv_volume_down_hold:
  alias: Master TV Volume Down (hold)
  sequence:
  - service: remote.send_command
    data:
      device: Master TV
      command: volume down
      num_repeats: 5
      delay_secs: 0.4
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:minus-thick
master_tv_volume_up_hold:
  alias: Master TV Volume Up (hold)
  sequence:
  - service: remote.send_command
    data:
      device: Master TV
      command: volume up
      num_repeats: 5
      delay_secs: 0.4
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:plus-thick
moon_lamp_1:
  alias: Moon Lamp 1
  sequence:
  - service: remote.send_command
    data:
      device: Moon Lamp
      command: 1
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:arrow-up-bold-circle-outline
moon_lamp_2:
  alias: Moon Lamp 2
  sequence:
  - service: remote.send_command
    data:
      device: Moon Lamp
      command: 2
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:arrow-down-bold-circle-outline
moon_lamp_off:
  alias: Moon Lamp Off
  sequence:
  - service: remote.send_command
    data:
      device: Moon Lamp
    command: 'off'
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:power-off
moon_lamp_on:
  alias: Moon Lamp On
  sequence:
  - service: remote.send_command
    data:
      device: Moon Lamp
      command: 'on'
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:power-on
moon_lamp_5:
  alias: Moon Lamp 5
  sequence:
  - service: remote.send_command
    data:
      device: Moon Lamp
      command: 5
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:alpha-r-circle-outline
moon_lamp_6:
  alias: Moon Lamp 6
  sequence:
  - service: remote.send_command
    data:
      device: Moon Lamp
      command: 6
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:alpha-g-circle-outline
moon_lamp_7:
  alias: Moon Lamp 7
  sequence:
  - service: remote.send_command
    data:
      device: Moon Lamp
      command: 7
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:alpha-b-circle-outline
moon_lamp_8:
  alias: Moon Lamp 8
  sequence:
  - service: remote.send_command
    data:
      device: Moon Lamp
      command: 8
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:alpha-w-circle-outline
moon_lamp_9:
  alias: Moon Lamp 9
  sequence:
  - service: remote.send_command
    data:
      device: Moon Lamp
      command: 9
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:circle
moon_lamp_10:
  alias: Moon Lamp 10
  sequence:
  - service: remote.send_command
    data:
      device: Moon Lamp
      command: 10
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:circle
moon_lamp_11:
  alias: Moon Lamp 11
  sequence:
  - service: remote.send_command
    data:
      device: Moon Lamp
      command: 11
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:circle
moon_lamp_12:
  alias: Moon Lamp 12
  sequence:
  - service: remote.send_command
    data:
      device: Moon Lamp
      command: 12
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:flash
moon_lamp_13:
  alias: Moon Lamp 13
  sequence:
  - service: remote.send_command
    data:
      device: Moon Lamp
      command: 13
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:circle
moon_lamp_14:
  alias: Moon Lamp 14
  sequence:
  - service: remote.send_command
    data:
      device: Moon Lamp
      command: 14
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:circle
moon_lamp_15:
  alias: Moon Lamp 15
  sequence:
  - service: remote.send_command
    data:
      device: Moon Lamp
      command: 15
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:circle
moon_lamp_16:
  alias: Moon Lamp 16
  sequence:
  - service: remote.send_command
    data:
      device: Moon Lamp
      command: 16
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:alpha-s-circle-outline
moon_lamp_17:
  alias: Moon Lamp 17
  sequence:
  - service: remote.send_command
    data:
      device: Moon Lamp
      command: 17
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:circle
moon_lamp_18:
  alias: Moon Lamp 18
  sequence:
  - service: remote.send_command
    data:
      device: Moon Lamp
      command: 18
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:circle
moon_lamp_19:
  alias: Moon Lamp 19
  sequence:
  - service: remote.send_command
    data:
      device: Moon Lamp
      command: 19
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:circle
moon_lamp_20:
  alias: Moon Lamp 20
  sequence:
  - service: remote.send_command
    data:
      device: Moon Lamp
      command: 20
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:alpha-f-circle-outline
moon_lamp_21:
  alias: Moon Lamp 21
  sequence:
  - service: remote.send_command
    data:
      device: Moon Lamp
      command: 21
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:circle
moon_lamp_22:
  alias: Moon Lamp 22
  sequence:
  - service: remote.send_command
    data:
      device: Moon Lamp
      command: 22
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:circle
moon_lamp_23:
  alias: Moon Lamp 23
  sequence:
  - service: remote.send_command
    data:
      device: Moon Lamp
      command: 23
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:circle
moon_lamp_24:
  alias: Moon Lamp 24
  sequence:
  - service: remote.send_command
    data:
      device: Moon Lamp
      command: 24
    target:
      device_id: 687d5dcbc7f9474e09148fb0c4c196fa
  mode: single
  icon: mdi:alpha-s-box-outline
coffee_button:
  alias: Coffee Button (Basement)
  sequence:
  - service: input_boolean.toggle
    data: {}
    target:
      entity_id: input_boolean.basement_coffee_button
  mode: single
coffee_button_upstairs:
  alias: Coffee Button (Upstairs)
  sequence:
  - service: input_boolean.toggle
    data: {}
    target:
      entity_id: input_boolean.upstairs_coffee_button
  mode: single
activate_alexa_actionable_notification:
  description: Activates an actionable notification on a specific echo device
  fields:
    text:
      description: The text you would like alexa to speak.
      example: What would you like the thermostat set to?
    event_id:
      description: Correlation ID for event responses
      example: ask_for_temperature
    alexa_device:
      description: Alexa device you want to trigger
      example: media_player.basement_echo
  sequence:
  - service: input_text.set_value
    data:
      entity_id: input_text.alexa_actionable_notification
      value: '{"text": "{{ text }}", "event": "{{ event_id }}"}'
  - service: media_player.play_media
    data:
      media_content_type: skill
      media_content_id: amzn1.ask.skill.98db150b-5f65-4313-bb1e-24bc9fc1ad01
    target:
      entity_id: '{{ alexa_device }}'
green_vaporizor:
  alias: Vaporizer Green
  sequence:
  - if:
    - condition: numeric_state
      entity_id: sensor.family_room_temp_sensor_humidity
      attribute: humidity
      below: 45
    then:
    - service: switch.turn_on
      data: {}
      target:
        entity_id: switch.green_plug
  mode: single
  icon: mdi:heat-wave
yellow_vaporizor:
  alias: Vaporizer Yellow
  sequence:
  - if:
    - condition: numeric_state
      entity_id: sensor.master_bedroom_temp_sensor_humidity
      attribute: humidity
      below: 55
    then:
    - service: switch.turn_on
      data: {}
      target:
        entity_id: switch.yellow_plug
  mode: single
  icon: mdi:heat-wave
text_mark_medicine:
  alias: Mark Medicine Notification
  sequence:
  - if:
    - condition: state
      entity_id: person.mark
      state: home
    then:
    - service: notify.alexa_media_all_echos
      data:
        message: <voice name="Kendra">Mark, <break time="700ms"/> did you take your
          pills?</voice>
        data:
          type: announce
    else:
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: person.mark
          state: home
      then:
      - service: notify.email
        data:
          message: Did you take your pills?
          title: Medicine
          target:
          - 3305243522@vtext.com
  - delay:
      hours: 0
      minutes: 15
      seconds: 0
      milliseconds: 0
  mode: single
  icon: mdi:message-alert
roku_volume_down:
  alias: Roku Volume Down
  sequence:
  - service: remote.send_command
    data:
      command: volume_down
    target:
      entity_id: remote.32_tcl_roku_tv
  mode: single
roku_volume_up:
  alias: Roku Volume Up
  sequence:
  - service: remote.send_command
    data:
      command: volume_up
    target:
      entity_id: remote.32_tcl_roku_tv
  mode: single
roku_volume_mute:
  alias: Roku Volume Mute
  sequence:
  - service: remote.send_command
    data:
      command: volume_mute
    target:
      entity_id: remote.32_tcl_roku_tv
  mode: single
roku_power:
  alias: Roku Power
  sequence:
  - service: remote.send_command
    data:
      command: power
    target:
      entity_id: remote.32_tcl_roku_tv
  mode: single
green_door:
  alias: Green Door
  sequence:
  - if:
    - condition: state
      entity_id: binary_sensor.green_garage_door_sensor_contact
      state: 'off'
    then:
    - service: cover.open_cover
      data: {}
      target:
        entity_id: cover.green_door
    else:
    - if:
      - condition: state
        entity_id: binary_sensor.green_garage_door_sensor_contact
        state: 'on'
      then:
      - service: cover.close_cover
        data: {}
        target:
          entity_id: cover.green_door
  mode: single
  icon: mdi:garage-alert-variant
blue_door:
  alias: Blue Door
  sequence:
  - if:
    - condition: state
      entity_id: binary_sensor.blue_garage_door_sensor_contact
      state: 'off'
    then:
    - service: cover.open_cover
      data: {}
      target:
        entity_id: cover.blue_door
    else:
    - if:
      - condition: state
        entity_id: binary_sensor.blue_garage_door_sensor_contact
        state: 'on'
      then:
      - service: cover.close_cover
        data: {}
        target:
          entity_id: cover.blue_door
  mode: single
  icon: mdi:garage-alert-variant
leaving_house_mark:
  alias: Leaving House Mark
  sequence:
  - service: lock.unlock
    data: {}
    target:
      entity_id: lock.garage_door
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - service: script.green_door
    data: {}
  mode: single
  icon: mdi:human-greeting-variant
leaving_house_holly:
  alias: Leaving House Holly
  sequence:
  - service: lock.unlock
    data: {}
    target:
      entity_id: lock.garage_door
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - service: script.blue_door
    data: {}
  mode: single
  icon: mdi:human-greeting-variant
guest_motion:
  alias: Guest Motion
  sequence:
  - if:
    - condition: state
      entity_id: input_boolean.house_guest
      state: 'on'
    then:
    - service: automation.turn_off
      data: {}
      target:
        entity_id: automation.turn_motion_sensor_off
    - service: automation.turn_on
      data: {}
      target:
        entity_id: automation.upstairs_staircase_motion_lights
    else:
    - service: automation.turn_off
      data: {}
      target:
        entity_id: automation.turn_motion_sensor_off
  mode: single
mark_shot_notification:
  alias: Mark Shot Notification
  sequence:
  - if:
    - condition: state
      entity_id: person.mark
      state: home
    then:
    - service: notify.alexa_media_all_echos
      data:
        message: <voice name="Kendra">Mark, <break time="700ms"/> did you take your
          shot?</voice>
        data:
          type: announce
    else:
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: person.mark
          state: home
      then:
      - service: notify.email
        data:
          message: Did you take your shot?
          target:
          - 3305243522@vtext.com
          title: Shots
  - delay:
      hours: 0
      minutes: 15
      seconds: 0
      milliseconds: 0
  mode: single
  icon: mdi:message-alert
automatic_door_locks:
  alias: Automatic Door Locks
  sequence:
  - service: lock.lock
    data: {}
    target:
      entity_id: lock.house_locks
  mode: single
wakeup_master_lights:
  alias: wakeup master lights
  sequence:
  - service: light.turn_on
    data:
      brightness_pct: 10
    target:
      entity_id:
      - light.holly_lamp
      - light.coffee_light
  - delay:
      hours: 0
      minutes: 0
      seconds: 15
      milliseconds: 0
  - repeat:
      until:
      - condition: numeric_state
        entity_id: light.holly_lamp
        attribute: brightness
        above: 254
      sequence:
      - service: light.turn_on
        data:
          brightness_step: 10
        target:
          entity_id:
          - light.holly_lamp
          - light.coffee_light
      - delay:
          hours: 0
          minutes: 0
          seconds: 15
          milliseconds: 0
  - service: light.turn_on
    data: {}
    target:
      entity_id: light.master_fan
  mode: single
notify_all:
  description: Notify all of devices
  fields:
    title:
      description: The Title of the notification
      example: Example text
    message:
      description: The content
      example: Example text
  sequence:
  - service: notify.mobile_app_sm_n960u
    data:
      title: '{{ title }}'
      message: '{{ message }}'
  - service: notify.mobile_app_mark_s_ipad
    data:
      title: '{{ title }}'
      message: '{{ message }}'
  - service: notify.mobile_app_sm_a115a
    data:
      title: '{{ title }}'
      message: '{{ message }}'
  - service: notify.mobile_app_sm_g960u
    data:
      title: '{{ title }}'
      message: '{{ message }}'
  mode: single
  alias: Notify All
master_tv_sleep:
  alias: Master TV Sleep
  sequence:
  - if:
    - condition: not
      conditions:
      - condition: state
        entity_id: media_player.fire_tv_master
        state: 'off'
    then:
    - service: script.master_tv_power
      data: {}
  mode: single
button_mail_reminder:
  alias: Button Mail Reminder
  sequence:
  - service: input_boolean.toggle
    data: {}
    target:
      entity_id: input_boolean.mail_reminder
  mode: single
  icon: mdi:mail
echo_volume_up:
  alias: Echo Volume Up
  sequence:
  - service: media_player.volume_set
    data:
      volume_level: '{{ (state_attr(''media_player.portable_echo'', ''volume_level'')
        | float + 0.35) | round(2) }}'
    target:
      entity_id: '{{ states.sensor.last_alexa.state }}'
  mode: single
  icon: mdi:volume-plus
echo_volume_down:
  alias: Echo Volume Down
  sequence:
  - service: media_player.volume_set
    data:
      volume_level: '{{ (state_attr(''media_player.portable_echo'', ''volume_level'')
        | float - 0.35) | round(2) }}'
    target:
      entity_id: '{{ states.sensor.last_alexa.state }}'
  mode: single
  icon: mdi:volume-minus
main_tv_mute:
  alias: Main TV Mute
  sequence:
  - service: remote.send_command
    data:
      num_repeats: 1
      delay_secs: 0.4
      hold_secs: 0
      device: AV Receiver
      command: Mute
    target:
      entity_id: remote.harmony_hub
  mode: single
main_tv_volume_down:
  alias: Main TV Volume Down
  sequence:
  - service: remote.send_command
    data:
      num_repeats: 1
      delay_secs: 0.4
      hold_secs: 0
      device: AV Receiver
      command: VolumeDown
    target:
      entity_id: remote.harmony_hub
  mode: single
  icon: mdi:volume-minus
main_tv_volume_up:
  alias: Main TV Volume Up
  sequence:
  - service: remote.send_command
    data:
      num_repeats: 1
      delay_secs: 0.4
      hold_secs: 0
      device: AV Receiver
      command: VolumeUp
    target:
      entity_id: remote.harmony_hub
  mode: single
  icon: mdi:volume-plus
main_tv_power:
  alias: Main TV Power
  sequence:
  - service: remote.toggle
    data:
      activity: Fire Stick
    target:
      device_id: 88f67465a2e48f4b8dc487a33c4dccc7
  mode: single
  icon: mdi:power
morning_briefing_mark:
  alias: Morning Briefing Mark
  sequence:
  - service: notify.alexa_media_master_echo
    data:
      data:
        type: tts
      message: "{% macro Salutations() %} {{ [ 'Have a nice day!', 'Have a wonderful
        time!', 'Today is going to be a good day!' ] | random }} {% endmacro %}\n{%
        macro NationalHoliday() %} {# National Holiday Announcememnt #} {% set holiday
        = state_attr('calendar.natdaycal_com_national_day_calendar', 'message') |
        capitalize %} {%- if 'National' in holiday -%} {{ ['Today is also known as
        ', 'Today we are also celebrating '] | random }} {{ state_attr('calendar.natdaycal_com_national_day_calendar',
        'message') | replace('&',' and ') }}.   {% if 'artichoke' in holiday %} {{
        ['Artichokes should not have a national holiday.  ',\n  'EEEWWWW! artichokes
        are nasty!  ', 'How did artichokes get a holiday.  '] | random }}\n{% endif
        %} {# add here for next holiday comment #} {% else %} Happy {{ holiday }}.
        \ {% if 'fools' in holiday %} {{ ['Which reminds me. The camera looking at
        the drive way caught a Tee Rex last night. <break time=\"1s\"/> April Fools!',\n
        \   'Which reminds me. I won the lottery and I am moving out to go live with
        Siri. <break time=\"1s\"/> April Fools!',\n    'Which reminds me. there was
        a time change last night. We have jumped 15 years into the future. <break
        time=\"1s\"/> April Fools!'\n    ]|random }}\n{% endif %}{%- endif -%} {%
        endmacro %}\n{# chore list #} {% macro choreList() %}\n  {% if is_state('input_boolean.clean_sweepers','on')
        %}\n  {{ ['Time to clean the sweepers.  ',\n    'Sweepers need to be cleaned
        today.  ',\n    'Today is the day to do sweeper maintenance.  '\n    ] | random
        }}\n  {% endif %}\n  {% if is_state('input_boolean.water_fountain_change','on')
        %}\n  {{ ['Time to change the water in the cat fountain.  ',\n    'The cats
        would like fresh water today.  ',\n    'Fountain water needs changed before
        it grows algae.  '\n    ] | random }}\n  {% endif %}\n  {% if is_state('input_boolean.water_fountain_clean','on')
        %}\n  {{ ['The cat fountain needs cleaned, washed, and descaled.  ',\n    'Today
        is the day to wash the cat fountain.  ',\n    'Clean out and was the cats
        water fountain.  '\n    ] | random }}\n  {% endif %}\n  {% if is_state('input_boolean.sweep_furniture','on')
        %}\n  {{ ['Time to sweep off the furniture.  ',\n    'The chair and living
        room furniture need swept today.  ',\n    'Sweep the chair, love seat, and
        two futons.  '\n    ] | random }}\n  {% endif %}\n  {% if is_state('input_boolean.clean_steps','on')
        %}\n  {{ ['The steps need swept today.  ',\n    'Time to sweep the steps again!
        \ ',\n    'Sure hope you feel like sweeping the steps today.  '\n    ] | random
        }}\n  {% endif %}\n  {% if is_state('input_boolean.clean_green_bathroom','on')
        %}\n  {{ ['Time to clean the ugly green bathroom and make it pretty again.
        \ ',\n    'The green bathroom needs to be cleaned today.  ',\n    'That seventies
        bathroom needs updated, or just cleaned.  '\n    ] | random }}\n  {% endif
        %}\n  {% if is_state('input_boolean.clean_master_bathroom','on') %}\n  {{
        ['Upstairs bathroom needs cleaned.  ',\n    'How about you clean the master
        bathroom today.  ',\n    'Holly would like to have her bathroom cleaned.  '\n
        \   ] | random }}\n    {% endif %}\n    {% if is_state('input_boolean.dust_house','on')
        %}\n    {{ ['I can write my name in the dust because it is so thick.  ',\n
        \     'How about you do some dusting today.  ',\n      'The house is getting
        pretty dusty.  '\n      ] | random }}\n    {% endif %}\n    {% if is_state('input_boolean.clean_ceiling_fans','on')
        %}\n    {{ ['Time to clean the ceiling fans again.  ',\n      'Hey, do you
        think you should clean the ceiling fans?  ',\n      'You should see all the
        dirt the ceiling fans throw arround.  '\n      ] | random }}\n    {% endif
        %}\n{% endmacro %}\n\n{% macro DateAndTime() %} Today is {{ ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']\n
        \ [now().weekday()] }}, {{ as_timestamp(now()) | timestamp_custom('%B %d %Y')
        }}.\nIt is {{ now().strftime(\"%I:%M %p\") }}. {% endmacro %}\n{% macro weatherReport()
        %} Today the weather will be {{ states('weather.firestone_house', 'state')
        }} with  a high of {{ states('sensor.hightemp', 'state') }} and a low of  {{
        states('sensor.lowtemp', 'state') }} degrees. {% endmacro %}\n{% macro birthdayAnnouncement()
        %} {% set bday = ['sensor.bday0', 'sensor.bday1', 'sensor.bday2', 'sensor.bday3',
        \n  'sensor.bday4', 'sensor.bday5', 'sensor.bday6', 'sensor.bday7', \n  'sensor.bday8',
        'sensor.bday9'] %}\n{% set bmonth = ['sensor.bmonth0', 'sensor.bmonth1', 'sensor.bmonth2',\n
        \ 'sensor.bmonth3', 'sensor.bmonth4', 'sensor.bmonth5', 'sensor.bmonth6',\n
        \ 'sensor.bmonth7', 'sensor.bmonth8', 'sensor.bmonth9'] %}\n{% set fname =
        ['sensor.fname0', 'sensor.fname1', 'sensor.fname2', 'sensor.fname3',\n  'sensor.fname4',
        'sensor.fname5', 'sensor.fname6', 'sensor.fname7',\n  'sensor.fname8', 'sensor.fname9']
        %}\n{% set age = ['sensor.age0', 'sensor.age1', 'sensor.age2', 'sensor.age3',
        'sensor.age4',\n  'sensor.age5', 'sensor.age6', 'sensor.age7', 'sensor.age8',
        'sensor.age9'] %}\n{% for i in range (10) %} {%- if (states(bmonth[i], 'state')|int)
        == now().month %} {% if (states(bday[i], 'state')|int) == now().day %} {{
        states(fname[i], 'state') }} is going to be {{ states(age[i], 'state') }}
        years old. {% endif %} {% endif -%} {% endfor %} {% endmacro %}\n{%- macro
        briefingGreeting() -%} {% set time = now().hour %} {% if (time >= 17) %}\n
        \ Good Evening.\n{% elif (time >= 12) %}\n  Good Afternoon.\n{% elif (time
        >= 4) %}\n  Good Morning.\n{% else %}\n  Hello.\n{% endif %} {% endmacro %}\n{%
        macro BirthCount() %} {% set count = 0 %} {% if states('sensor.bmonth0', 'state')|int
        == now().month and \n  states('sensor.bday0', 'state')|int == now().day %}\n{%
        set count= count + 1 %} {% endif %} {% if states('sensor.bmonth1', 'state')|int
        == now().month and \n  states('sensor.bday1', 'state')|int == now().day %}\n{%
        set count= count + 1 %} {% endif %} {% if states('sensor.bmonth2', 'state')|int
        == now().month and \n  states('sensor.bday2', 'state')|int == now().day %}\n{%
        set count= count + 1 %} {% endif %} {% if states('sensor.bmonth3', 'state')|int
        == now().month and \n  states('sensor.bday3', 'state')|int == now().day %}\n{%
        set count= count + 1 %} {% endif %} {% if states('sensor.bmonth4', 'state')|int
        == now().month and \n  states('sensor.bday4', 'state')|int == now().day %}\n{%
        set count= count + 1 %} {% endif %} {% if states('sensor.bmonth5', 'state')|int
        == now().month and \n  states('sensor.bday5', 'state')|int == now().day %}\n{%
        set count= count + 1 %} {% endif %} {% if states('sensor.bmonth6', 'state')|int
        == now().month and \n  states('sensor.bday6', 'state')|int == now().day %}\n{%
        set count= count + 1 %} {% endif %} {% if states('sensor.bmonth7', 'state')|int
        == now().month and \n  states('sensor.bday7', 'state')|int == now().day %}\n{%
        set count= count + 1 %} {% endif %} {% if states('sensor.bmonth8', 'state')|int
        == now().month and \n  states('sensor.bday8', 'state')|int == now().day %}\n{%
        set count= count + 1 %} {% endif %} {% if states('sensor.bmonth9', 'state')|int
        == now().month and \n  states('sensor.bday9', 'state')|int == now().day %}\n{%
        set count= count + 1 %} {% endif %} {% if count >= 1 %} You have {{ count
        }} birthdays today. {% endif %} {% endmacro %}\n\n{% macro getSweepers() %}
        {% set count = (states.vacuum | selectattr('state', '!=', 'docked') | list
        | length ) %} {% if count > 0 %} You have {{ count }} sweepers missing.   This
        is who is missing.   {% for state in states.vacuum | selectattr('state', '!=',
        'docked') %}  {{ state_attr(state.entity_id, 'friendly_name') }}.    {% endfor
        %} {% else %} {{ [ 'All the good little robots are charging.  ', 'No sweepers
        mising', 'Everyone is on  there dock.  ' ] | random }} {% endif %} {% endmacro
        %}\n{# a macro that removes all newline characters, empty spaces, and returns
        formatted text #}  {%- macro cleanup(data) -%}\n  {%- for item in data.split(\"\\n\")
        \ if item | trim != \"\" -%}\n    {{ item | trim }} {% endfor -%}\n{%- endmacro
        -%}\n{# a macro to call all macros :)  #} {%- macro mother_of_all_macros()
        -%}\n  {{ briefingGreeting() }}  Mark.\n  {{ DateAndTime() }}\n  {{ NationalHoliday()
        }}\n  {{ weatherReport() }}\n  {{ BirthCount() }}\n  {{ birthdayAnnouncement()
        }}\n  {{ getSweepers() }}<break time=\"1s\"/>\n  {{ choreList() }}<break time=\"1s\"/>\n
        \ {{ Salutations() }}\n{%- endmacro -%}\n\n  {# Call the macro  #}\n{{- cleanup(mother_of_all_macros())
        -}}"
  mode: single
sweeper_announcement:
  alias: Sweeper Announcement
  sequence:
  - wait_template: "{% set count = (states.vacuum | selectattr('state', '!=', 'docked')
      | list  \n    | length ) %}{% if count > 0 %} You have {{ count }} sweepers
      missing.   \n    This is who is missing.  {% for state in states.vacuum | selectattr('state',\n
      \   '!=', 'docked') %} {{ state_attr(state.entity_id, 'friendly_name') }}.  {%\n
      \   endfor %}{% else %}All the good little robots made it home.{% endif %}"
    continue_on_timeout: true
    timeout: '00:00:00.250'
  mode: single
morning_briefing_holly:
  alias: Morning Briefing Holly
  sequence:
  - service: notify.alexa_media_portable_echo
    data:
      data:
        type: tts
      message: "{% macro Salutations() %} {{ [ 'Have a nice day!', 'Have a wonderful
        time!', 'Today is going to be a good day!' ] | random }} {% endmacro %}\n{%
        macro NationalHoliday() %} {# National Holiday Announcememnt #} {% set holiday
        = state_attr('calendar.natdaycal_com_national_day_calendar', 'message') |
        capitalize %} {%- if 'National' in holiday -%} {{ ['Today is also known as
        ', 'Today we are also celebrating '] | random }} {{ state_attr('calendar.natdaycal_com_national_day_calendar',
        'message') | replace('&',' and ') }}.   {% if 'artichoke' in holiday %} {{
        ['Artichokes should not have a national holiday.  ',\n  'EEEWWWW! artichokes
        are nasty!  ', 'How did artichokes get a holiday.  '] | random }}\n{% endif
        %} {# add here for next holiday comment #} {% else %} Happy {{ holiday }}.
        \ {% if 'fools' in holiday %} {{ ['Which reminds me. The camera looking at
        the drive way caught a Tee Rex last night. <break time=\"1s\"/> April Fools!',\n
        \   'Which reminds me. I won the lottery and I am moving out to go live with
        Siri. <break time=\"1s\"/> April Fools!',\n    'Which reminds me. there was
        a time change last night. We have jumped 15 years into the future. <break
        time=\"1s\"/> April Fools!'\n    ]|random }}\n{% endif %}{%- endif -%} {%
        endmacro %}\n{% macro DateAndTime() %} Today is {{ ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']\n
        \ [now().weekday()] }}, {{ as_timestamp(now()) | timestamp_custom('%B %d %Y')
        }}.\nIt is {{ now().strftime(\"%I:%M %p\") }}. {% endmacro %}\n{% macro mailNotify()
        %}\n  {% if (states('input_boolean.mail_reminder','state') == 'on') and (now().weekday()
        != 6) %}\n    Remember to take the mail to the post office today.\n  {% endif
        %}\n{% endmacro %}\n{% macro weatherReport() %} Today the weather will be
        {{ states('weather.firestone_house', 'state') }} with  a high of {{ states('sensor.hightemp',
        'state') }} and a low of  {{ states('sensor.lowtemp', 'state') }} degrees.
        {% endmacro %}\n{% macro birthdayAnnouncement() %} {% set bday = ['sensor.bday0',
        'sensor.bday1', 'sensor.bday2', 'sensor.bday3', \n  'sensor.bday4', 'sensor.bday5',
        'sensor.bday6', 'sensor.bday7', \n  'sensor.bday8', 'sensor.bday9'] %}\n{%
        set bmonth = ['sensor.bmonth0', 'sensor.bmonth1', 'sensor.bmonth2',\n  'sensor.bmonth3',
        'sensor.bmonth4', 'sensor.bmonth5', 'sensor.bmonth6',\n  'sensor.bmonth7',
        'sensor.bmonth8', 'sensor.bmonth9'] %}\n{% set fname = ['sensor.fname0', 'sensor.fname1',
        'sensor.fname2', 'sensor.fname3',\n  'sensor.fname4', 'sensor.fname5', 'sensor.fname6',
        'sensor.fname7',\n  'sensor.fname8', 'sensor.fname9'] %}\n{% set age = ['sensor.age0',
        'sensor.age1', 'sensor.age2', 'sensor.age3', 'sensor.age4',\n  'sensor.age5',
        'sensor.age6', 'sensor.age7', 'sensor.age8', 'sensor.age9'] %}\n{% for i in
        range (10) %} {%- if (states(bmonth[i], 'state')|int) == now().month %} {%
        if (states(bday[i], 'state')|int) == now().day %} {{ states(fname[i], 'state')
        }} is going to be {{ states(age[i], 'state') }} years old. {% endif %} {%
        endif -%} {% endfor %} {% endmacro %}\n{%- macro briefingGreeting() -%} {%
        set time = now().hour %} {% if (time >= 17) %}\n  Good Evening.\n{% elif (time
        >= 12) %}\n  Good Afternoon.\n{% elif (time >= 4) %}\n  Good Morning.\n{%
        else %}\n  Hello.\n{% endif %} {% endmacro %}\n{% macro BirthCount() %} {%
        set count = 0 %} {% if states('sensor.bmonth0', 'state')|int == now().month
        and \n  states('sensor.bday0', 'state')|int == now().day %}\n{% set count=
        count + 1 %} {% endif %} {% if states('sensor.bmonth1', 'state')|int == now().month
        and \n  states('sensor.bday1', 'state')|int == now().day %}\n{% set count=
        count + 1 %} {% endif %} {% if states('sensor.bmonth2', 'state')|int == now().month
        and \n  states('sensor.bday2', 'state')|int == now().day %}\n{% set count=
        count + 1 %} {% endif %} {% if states('sensor.bmonth3', 'state')|int == now().month
        and \n  states('sensor.bday3', 'state')|int == now().day %}\n{% set count=
        count + 1 %} {% endif %} {% if states('sensor.bmonth4', 'state')|int == now().month
        and \n  states('sensor.bday4', 'state')|int == now().day %}\n{% set count=
        count + 1 %} {% endif %} {% if states('sensor.bmonth5', 'state')|int == now().month
        and \n  states('sensor.bday5', 'state')|int == now().day %}\n{% set count=
        count + 1 %} {% endif %} {% if states('sensor.bmonth6', 'state')|int == now().month
        and \n  states('sensor.bday6', 'state')|int == now().day %}\n{% set count=
        count + 1 %} {% endif %} {% if states('sensor.bmonth7', 'state')|int == now().month
        and \n  states('sensor.bday7', 'state')|int == now().day %}\n{% set count=
        count + 1 %} {% endif %} {% if states('sensor.bmonth8', 'state')|int == now().month
        and \n  states('sensor.bday8', 'state')|int == now().day %}\n{% set count=
        count + 1 %} {% endif %} {% if states('sensor.bmonth9', 'state')|int == now().month
        and \n  states('sensor.bday9', 'state')|int == now().day %}\n{% set count=
        count + 1 %} {% endif %} {% if count >= 1 %} You have {{ count }} birthdays
        today. {% endif %} {% endmacro %}\n\n{% macro getSweepers() %} {% set count
        = (states.vacuum | selectattr('state', '!=', 'docked') | list | length ) %}
        {% if count > 0 %} You have {{ count }} sweepers missing.   This is who is
        missing.   {% for state in states.vacuum | selectattr('state', '!=', 'docked')
        %}  {{ state_attr(state.entity_id, 'friendly_name') }}.    {% endfor %} {%
        else %} {{ [ 'All the good little robots are charging.  ', 'No sweepers mising',
        'Everyone is on  there dock.  ' ] | random }} {% endif %} {% endmacro %}\n{#
        a macro that removes all newline characters, empty spaces, and returns formatted
        text #}  {%- macro cleanup(data) -%}\n  {%- for item in data.split(\"\\n\")
        \ if item | trim != \"\" -%}\n    {{ item | trim }} {% endfor -%}\n{%- endmacro
        -%}\n{# a macro to call all macros :)  #} {%- macro mother_of_all_macros()
        -%}\n  {{ briefingGreeting() }}\n  {{ weatherReport() }}\n  {{ birthdayAnnouncement()
        }}<break time=\"1s\"/>\n  {{ Salutations() }}\n  {{ mailNotify() }}\n{%- endmacro
        -%}\n\n  {# Call the macro  #}\n{{- cleanup(mother_of_all_macros()) -}}"
  mode: single
  icon: mdi:account
briefing_report:
  alias: Briefing Report
  sequence:
  - service: notify.alexa_media_last_called
    data:
      data:
        type: tts
      message: "{% macro Salutations() %} {{ [ 'Have a nice day!', 'Have a wonderful
        time!', 'Today is going to be a good day!' ] | random }} {% endmacro %}\n{%
        macro NationalHoliday() %} {# National Holiday Announcememnt #} {% set holiday
        = state_attr('calendar.natdaycal_com_national_day_calendar', 'message') |
        capitalize %} {%- if 'National' in holiday -%} {{ ['Today is also known as
        ', 'Today we are also celebrating '] | random }} {{ state_attr('calendar.natdaycal_com_national_day_calendar',
        'message') | replace('&',' and ') }}.   {% if 'artichoke' in holiday %} {{
        ['Artichokes should not have a national holiday.  ',\n  'EEEWWWW! artichokes
        are nasty!  ', 'How did artichokes get a holiday.  '] | random }}\n{% endif
        %} {# add here for next holiday comment #} {% else %} Happy {{ holiday }}.
        \ {% if 'fools' in holiday %} {{ ['Which reminds me. The camera looking at
        the drive way caught a Tee Rex last night. <break time=\"1s\"/> April Fools!',\n
        \   'Which reminds me. I won the lottery and I am moving out to go live with
        Siri. <break time=\"1s\"/> April Fools!',\n    'Which reminds me. there was
        a time change last night. We have jumped 15 years into the future. <break
        time=\"1s\"/> April Fools!'\n    ]|random }}\n{% endif %}{%- endif -%} {%
        endmacro %}\n{% macro DateAndTime() %} Today is {{ ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']\n
        \ [now().weekday()] }}, {{ as_timestamp(now()) | timestamp_custom('%B %d %Y')
        }}.\nIt is {{ now().strftime(\"%I:%M %p\") }}. {% endmacro %}\n{% macro weatherReport()
        %} Today the weather will be {{ states('weather.firestone_house', 'state')
        }} with  a high of {{ states('sensor.hightemp', 'state') }} and a low of  {{
        states('sensor.lowtemp', 'state') }} degrees. {% endmacro %}\n{% macro birthdayAnnouncement()
        %} {% set bday = ['sensor.bday0', 'sensor.bday1', 'sensor.bday2', 'sensor.bday3',
        \n  'sensor.bday4', 'sensor.bday5', 'sensor.bday6', 'sensor.bday7', \n  'sensor.bday8',
        'sensor.bday9'] %}\n{% set bmonth = ['sensor.bmonth0', 'sensor.bmonth1', 'sensor.bmonth2',\n
        \ 'sensor.bmonth3', 'sensor.bmonth4', 'sensor.bmonth5', 'sensor.bmonth6',\n
        \ 'sensor.bmonth7', 'sensor.bmonth8', 'sensor.bmonth9'] %}\n{% set fname =
        ['sensor.fname0', 'sensor.fname1', 'sensor.fname2', 'sensor.fname3',\n  'sensor.fname4',
        'sensor.fname5', 'sensor.fname6', 'sensor.fname7',\n  'sensor.fname8', 'sensor.fname9']
        %}\n{% set age = ['sensor.age0', 'sensor.age1', 'sensor.age2', 'sensor.age3',
        'sensor.age4',\n  'sensor.age5', 'sensor.age6', 'sensor.age7', 'sensor.age8',
        'sensor.age9'] %}\n{% for i in range (10) %} {%- if (states(bmonth[i], 'state')|int)
        == now().month %} {% if (states(bday[i], 'state')|int) == now().day %} {{
        states(fname[i], 'state') }} is going to be {{ states(age[i], 'state') }}
        years old. {% endif %} {% endif -%} {% endfor %} {% endmacro %}\n{%- macro
        briefingGreeting() -%} {% set time = now().hour %} {% if (time >= 17) %}\n
        \ Good Evening.\n{% elif (time >= 12) %}\n  Good Afternoon.\n{% elif (time
        >= 4) %}\n  Good Morning.\n{% else %}\n  Hello.\n{% endif %} {% endmacro %}\n{%
        macro BirthCount() %} {% set count = 0 %} {% if states('sensor.bmonth0', 'state')|int
        == now().month and \n  states('sensor.bday0', 'state')|int == now().day %}\n{%
        set count= count + 1 %} {% endif %} {% if states('sensor.bmonth1', 'state')|int
        == now().month and \n  states('sensor.bday1', 'state')|int == now().day %}\n{%
        set count= count + 1 %} {% endif %} {% if states('sensor.bmonth2', 'state')|int
        == now().month and \n  states('sensor.bday2', 'state')|int == now().day %}\n{%
        set count= count + 1 %} {% endif %} {% if states('sensor.bmonth3', 'state')|int
        == now().month and \n  states('sensor.bday3', 'state')|int == now().day %}\n{%
        set count= count + 1 %} {% endif %} {% if states('sensor.bmonth4', 'state')|int
        == now().month and \n  states('sensor.bday4', 'state')|int == now().day %}\n{%
        set count= count + 1 %} {% endif %} {% if states('sensor.bmonth5', 'state')|int
        == now().month and \n  states('sensor.bday5', 'state')|int == now().day %}\n{%
        set count= count + 1 %} {% endif %} {% if states('sensor.bmonth6', 'state')|int
        == now().month and \n  states('sensor.bday6', 'state')|int == now().day %}\n{%
        set count= count + 1 %} {% endif %} {% if states('sensor.bmonth7', 'state')|int
        == now().month and \n  states('sensor.bday7', 'state')|int == now().day %}\n{%
        set count= count + 1 %} {% endif %} {% if states('sensor.bmonth8', 'state')|int
        == now().month and \n  states('sensor.bday8', 'state')|int == now().day %}\n{%
        set count= count + 1 %} {% endif %} {% if states('sensor.bmonth9', 'state')|int
        == now().month and \n  states('sensor.bday9', 'state')|int == now().day %}\n{%
        set count= count + 1 %} {% endif %} {% if count >= 1 %} You have {{ count
        }} birthdays today. {% endif %} {% endmacro %}\n\n{% macro getSweepers() %}
        {% set count = (states.vacuum | selectattr('state', '!=', 'docked') | list
        | length ) %} {% if count > 0 %} You have {{ count }} sweepers missing.   This
        is who is missing.   {% for state in states.vacuum | selectattr('state', '!=',
        'docked') %}  {{ state_attr(state.entity_id, 'friendly_name') }}.    {% endfor
        %} {% else %} {{ [ 'All the good little robots are charging.  ', 'No sweepers
        mising', 'Everyone is on  there dock.  ' ] | random }} {% endif %} {% endmacro
        %}\n{# a macro that removes all newline characters, empty spaces, and returns
        formatted text #}  {%- macro cleanup(data) -%}\n  {%- for item in data.split(\"\\n\")
        \ if item | trim != \"\" -%}\n    {{ item | trim }} {% endfor -%}\n{%- endmacro
        -%}\n{# a macro to call all macros :)  #} {%- macro mother_of_all_macros()
        -%}\n  {{ briefingGreeting() }}  Mark.\n  {{ DateAndTime() }}\n  {{ NationalHoliday()
        }}\n  {{ weatherReport() }}\n  {{ BirthCount() }}\n  {{ birthdayAnnouncement()
        }}\n  {{ getSweepers() }}<break time=\"1s\"/>\n  {{ Salutations() }}\n{%-
        endmacro -%}\n\n  {# Call the macro  #}\n{{- cleanup(mother_of_all_macros())
        -}}"
  mode: single
birthday_text_mark:
  alias: Birthday Text Mark
  sequence:
  - service: notify.email
    data:
      target: 3305243522@vtext.com
      title: '{% if now().day <=15 %} {{ now().strftime(''%B'') }} Birthdays {% else
        %} {{ (now() + timedelta(days=17)).strftime(''%B'') }} Birthdays {% endif
        %}'
      message: "{% set fname = ['sensor.fname0','sensor.fname1','sensor.fname2','sensor.fname3','sensor.fname4','sensor.fname5','sensor.fname6','sensor.fname7','sensor.fname8','sensor.fname9']
        %} {% set lname = ['sensor.lname0','sensor.lname1','sensor.lname2','sensor.lname3','sensor.lname4','sensor.lname5','sensor.lname6','sensor.lname7','sensor.lname8','sensor.lname9']
        %} {% set bmonth = ['sensor.bmonth0','sensor.bmonth1','sensor.bmonth2','sensor.bmonth3','sensor.bmonth4','sensor.bmonth5','sensor.bmonth6','sensor.bmonth7','sensor.bmonth8','sensor.bmonth9']
        %} {% set bday = ['sensor.bday0','sensor.bday1','sensor.bday2','sensor.bday3','sensor.bday4','sensor.bday5','sensor.bday6','sensor.bday7','sensor.bday8','sensor.bday9']
        %} {% set byear = ['sensor.byear0','sensor.byear1','sensor.byear2','sensor.byear3','sensor.byear4','sensor.byear5','sensor.byear6','sensor.byear7','sensor.byear8','sensor.byear9']
        %} {% set age = ['sensor.age0','sensor.age1','sensor.age2','sensor.age3','sensor.age4','sensor.age5','sensor.age6','sensor.age7','sensor.age8','sensor.age9']
        %} {% set monthfn = ['January','February','March','April','May','June','July','August','September','October','November','December']
        %} {% set linereturn = \"\\n\" %} {% set cmonth = now().month %} {% set cmonthfn
        = now().strftime('%B') %} {% set nmonth = now().month + 1 %} {% set nmonthfn
        = (now() + timedelta(days=30)).strftime('%B') %}\n{% macro CurrentMonthBirthdays()
        %}\n  {% for i in range (10) %}\n    {%- if (states(bmonth[i])|int) == cmonth
        -%}\n      {% if ((states(bday[i])|int) == 1) or ((states(bday[i])|int) ==
        21) or ((states(bday[i])|int) == 31) %}\n      {{ states(fname[i]) }}'s on
        the {{ states(bday[i]) }}st.\n      {% elif ((states(bday[i])|int) == 2) or
        ((states(bday[i])|int) == 22) %}\n      {{ states(fname[i]) }}'s on the {{
        states(bday[i]) }}nd.\n      {% elif ((states(bday[i])|int) == 3) or ((states(bday[i])|int)
        == 23) %}\n      {{ states(fname[i]) }}'s on the {{ states(bday[i]) }}rd.\n
        \     {% else %}\n      {{ states(fname[i]) }}'s on the {{ states(bday[i])
        }}th.\n      {% endif %}\n    {%- endif -%}\n  {% endfor %}\n{% endmacro %}\n{%
        macro NextMonthBirthdays() %}\n  {% for i in range (10) %}\n    {%- if (states(bmonth[i])|int)
        == nmonth -%}\n      {% if ((states(bday[i])|int) == 1) or ((states(bday[i])|int)
        == 21) or ((states(bday[i])|int) == 31) %}\n      {{ states(fname[i]) }}'s
        on the {{ states(bday[i]) }}st.\n      {% elif ((states(bday[i])|int) == 2)
        or ((states(bday[i])|int) == 22) %}\n      {{ states(fname[i]) }}'s on the
        {{ states(bday[i]) }}nd.\n      {% elif ((states(bday[i])|int) == 3) or ((states(bday[i])|int)
        == 23) %}\n      {{ states(fname[i]) }}'s on the {{ states(bday[i]) }}rd.\n
        \     {% else %}\n      {{ states(fname[i]) }}'s on the {{ states(bday[i])
        }}th.\n      {% endif %}\n    {%- endif -%}\n  {% endfor %}\n{% endmacro %}\n{#
        a macro that removes all newline characters, empty spaces, and returns formatted
        text  #} {%- macro cleanup(data) -%}\n  {%- for item in data.split(\" \")
        \ if item | trim != \"\" -%}\n    {{ item | trim }} {% endfor -%}\n{%- endmacro
        -%}\n{# a macro to call all macros :)  #} {%- macro mother_of_all_macros()
        -%}\n  {% if now().day < 15 %}\n  {{ CurrentMonthBirthdays() }}\n  {% else
        %}\n  {{ NextMonthBirthdays() }}\n  {% endif %}\n{%- endmacro -%}\n{# Call
        the macro  #} {{- cleanup(mother_of_all_macros()) -}}"
  mode: single
birthday_text_holly:
  alias: Birthday Text Holly
  sequence:
  - service: notify.email
    data:
      target: 3305249910@vtext.com
      title: '{% if now().day <=15 %} {{ now().strftime(''%B'') }} Birthdays {% else
        %} {{ (now() + timedelta(days=17)).strftime(''%B'') }} Birthdays {% endif
        %}'
      message: "{% set fname = ['sensor.fname0','sensor.fname1','sensor.fname2','sensor.fname3','sensor.fname4','sensor.fname5','sensor.fname6','sensor.fname7','sensor.fname8','sensor.fname9']
        %} {% set lname = ['sensor.lname0','sensor.lname1','sensor.lname2','sensor.lname3','sensor.lname4','sensor.lname5','sensor.lname6','sensor.lname7','sensor.lname8','sensor.lname9']
        %} {% set bmonth = ['sensor.bmonth0','sensor.bmonth1','sensor.bmonth2','sensor.bmonth3','sensor.bmonth4','sensor.bmonth5','sensor.bmonth6','sensor.bmonth7','sensor.bmonth8','sensor.bmonth9']
        %} {% set bday = ['sensor.bday0','sensor.bday1','sensor.bday2','sensor.bday3','sensor.bday4','sensor.bday5','sensor.bday6','sensor.bday7','sensor.bday8','sensor.bday9']
        %} {% set byear = ['sensor.byear0','sensor.byear1','sensor.byear2','sensor.byear3','sensor.byear4','sensor.byear5','sensor.byear6','sensor.byear7','sensor.byear8','sensor.byear9']
        %} {% set age = ['sensor.age0','sensor.age1','sensor.age2','sensor.age3','sensor.age4','sensor.age5','sensor.age6','sensor.age7','sensor.age8','sensor.age9']
        %} {% set monthfn = ['January','February','March','April','May','June','July','August','September','October','November','December']
        %} {% set linereturn = \"\\n\" %} {% set cmonth = now().month %} {% set cmonthfn
        = now().strftime('%B') %} {% set nmonth = now().month + 1 %} {% set nmonthfn
        = (now() + timedelta(days=30)).strftime('%B') %}\n{% macro CurrentMonthBirthdays()
        %}\n  {% for i in range (10) %}\n    {%- if (states(bmonth[i])|int) == cmonth
        -%}\n      {% if ((states(bday[i])|int) == 1) or ((states(bday[i])|int) ==
        21) or ((states(bday[i])|int) == 31) %}\n      {{ states(fname[i]) }}'s on
        the {{ states(bday[i]) }}st.\n      {% elif ((states(bday[i])|int) == 2) or
        ((states(bday[i])|int) == 22) %}\n      {{ states(fname[i]) }}'s on the {{
        states(bday[i]) }}nd.\n      {% elif ((states(bday[i])|int) == 3) or ((states(bday[i])|int)
        == 23) %}\n      {{ states(fname[i]) }}'s on the {{ states(bday[i]) }}rd.\n
        \     {% else %}\n      {{ states(fname[i]) }}'s on the {{ states(bday[i])
        }}th.\n      {% endif %}\n    {%- endif -%}\n  {% endfor %}\n{% endmacro %}\n{%
        macro NextMonthBirthdays() %}\n  {% for i in range (10) %}\n    {%- if (states(bmonth[i])|int)
        == nmonth -%}\n      {% if ((states(bday[i])|int) == 1) or ((states(bday[i])|int)
        == 21) or ((states(bday[i])|int) == 31) %}\n      {{ states(fname[i]) }}'s
        on the {{ states(bday[i]) }}st.\n      {% elif ((states(bday[i])|int) == 2)
        or ((states(bday[i])|int) == 22) %}\n      {{ states(fname[i]) }}'s on the
        {{ states(bday[i]) }}nd.\n      {% elif ((states(bday[i])|int) == 3) or ((states(bday[i])|int)
        == 23) %}\n      {{ states(fname[i]) }}'s on the {{ states(bday[i]) }}rd.\n
        \     {% else %}\n      {{ states(fname[i]) }}'s on the {{ states(bday[i])
        }}th.\n      {% endif %}\n    {%- endif -%}\n  {% endfor %}\n{% endmacro %}\n{#
        a macro that removes all newline characters, empty spaces, and returns formatted
        text  #} {%- macro cleanup(data) -%}\n  {%- for item in data.split(\" \")
        \ if item | trim != \"\" -%}\n    {{ item | trim }} {% endfor -%}\n{%- endmacro
        -%}\n{# a macro to call all macros :)  #} {%- macro mother_of_all_macros()
        -%}\n  {% if now().day < 15 %}\n  {{ CurrentMonthBirthdays() }}\n  {% else
        %}\n  {{ NextMonthBirthdays() }}\n  {% endif %}\n{%- endmacro -%}\n{# Call
        the macro  #} {{- cleanup(mother_of_all_macros()) -}}"
  mode: single
holly_green:
  alias: Holly Green
  sequence:
  - service: input_text.set_value
    data:
      value: Green
    target:
      entity_id: input_text.holly_driving
  - service: automation.turn_on
    data: {}
    target:
      entity_id: automation.holly_zone
  mode: single
  icon: mdi:car
holly_blue:
  alias: Holly Blue
  sequence:
  - service: input_text.set_value
    data:
      value: Blue
    target:
      entity_id: input_text.holly_driving
  - service: automation.turn_on
    data: {}
    target:
      entity_id: automation.holly_zone
  mode: single
  icon: mdi:car
mark_green:
  alias: Mark Green
  sequence:
  - service: input_text.set_value
    data:
      value: Green
    target:
      entity_id: input_text.mark_driving
  - service: automation.turn_on
    data: {}
    target:
      entity_id: automation.mark_zone
  mode: single
  icon: mdi:car
mark_blue:
  alias: Mark Blue
  sequence:
  - service: input_text.set_value
    data:
      value: Blue
    target:
      entity_id: input_text.mark_driving
  - service: automation.turn_on
    data: {}
    target:
      entity_id: automation.mark_zone
  mode: single
  icon: mdi:car
coffee_check_upstairs:
  alias: Coffee Check Upstairs
  sequence:
  - if:
    - condition: state
      entity_id: input_boolean.upstairs_coffee_ready
      state: 'on'
    then:
    - service: notify.alexa_media_last_called
      data:
        message: Upstairs coffee pot is ready.
        data:
          type: tts
    else:
    - service: notify.alexa_media_last_called
      data:
        message: Coffee, what coffee!
        data:
          type: tts
  mode: single
  icon: mdi:coffee-maker-check-outline
coffee_check_basement:
  alias: Coffee Check Basement
  sequence:
  - if:
    - condition: state
      entity_id: input_boolean.basement_coffee_ready
      state: 'on'
    then:
    - service: notify.alexa_media_last_called
      data:
        message: Basement coffee pot is ready.
        data:
          type: tts
    else:
    - service: notify.alexa_media_last_called
      data:
        message: Coffee, what coffee!
        data:
          type: tts
  mode: single
  icon: mdi:coffee-maker-check-outline
moon_lamp_off_2:
  alias: Moon Lamp Off
  sequence:
  - service: remote.send_command
    data:
      num_repeats: 1
      delay_secs: 0.4
      hold_secs: 0
      device: Moon Lamp
      command: 'off'
    target:
      entity_id: remote.upstairs_remote
  mode: single
  icon: mdi:power-off
test_stairs_light:
  alias: test stairs light
  sequence:
  - if:
    - condition: state
      entity_id: light.upstairs_office
      state: 'off'
    then:
    - service: light.turn_on
      data:
        brightness_pct: 100
      target:
        entity_id: light.upstairs_office
    else:
    - if:
      - condition: state
        entity_id: light.upstairs_office
        state: 'on'
      then:
      - service: light.turn_off
        data: {}
        target:
          entity_id: light.upstairs_office
  mode: single
